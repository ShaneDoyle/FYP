<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
var networkType = network_socket_tcp;
var port = 50000;
var maxPlayers = 8;
var bufferSize = 1024;
var bufferType = buffer_fixed;
var bufferAlignment = 1;
ResetId = false;

server = network_create_server(networkType, port, maxPlayers);
global.buffer = buffer_create(bufferSize, bufferType, bufferAlignment);

global.players = ds_list_create();
playerIdCounter = 0;

//Create NPC's
npcIdCounter = 0;

randomize();
var i = instance_create(x, y, obj_server_npc);
i.xx = 192;
i.yy = 200;
i.npcId = npcIdCounter;
i.npcType = irandom_range(0, 4);
npcIdCounter++;

randomize();
var j = instance_create(x, y, obj_server_npc);
j.xx = 392;
j.yy = 200;
j.npcId = npcIdCounter;
i.npcType = irandom_range(0, 4);
npcIdCounter++;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///TEST
socket = network_create_socket(network_socket_tcp);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset ID's
if(!instance_exists(obj_server_player) &amp;&amp; ResetId == true)
{
    ResetId = false;
    room_restart();
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle connection, disconnection and sending data
var eventType = ds_map_find_value(async_load, "type");
switch(eventType)
{
    //Called when a player connects.
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        
        playerIdCounter++;
        ResetId = true;
        
        var pId = playerIdCounter;
        
        //Create a player!
        with (instance_create(0, 0, obj_server_player))
        {
            playerIdentifier = pId;
            playerName = "";
            playerInGame = false;
            playerSocket = socket;
        }
        
        ds_list_add(global.players, socket);
        
        //Send ID of the Player.
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 4);
        buffer_write(global.buffer, buffer_u32, playerIdCounter);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
    break;
    
    //Called when a client disconnects
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var index = ds_list_find_index(global.players, socket);
        
        if (index != -1)
        {
            ds_list_delete(global.players, index);
        }
        
        //Get information about the player leaving
        var playerLeavingId = 0;
        
        with (obj_server_player)
        {
            if (playerSocket == socket)
            {
                playerLeavingId = playerIdentifier;
            }
        }
        
        //Notify all the connected clients
        for (var i = 0; i &lt; ds_list_size(global.players);i++)
        {
            var storedPlayerSocket = ds_list_find_value(global.players, i);
            
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, 5);
            buffer_write(global.buffer, buffer_u32, playerLeavingId);
            network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
        
        with (obj_server_player)
        {
            if (playerIdentifier == playerLeavingId)
            {
                instance_destroy();
            }
        }
        
    break;
    
    //Called when we recieved information from the client
    case network_type_data:
        var buffer = ds_map_find_value(async_load, "buffer");   //Crate a read buffer and store incoming information in it
        var socket = ds_map_find_value(async_load, "id");       //Get socket of the player sending the data
        buffer_seek(buffer, buffer_seek_start, 0);              //Seek to the beginning of the new created read buffer
        scr_server_buffers(buffer, socket);                     //Call server script
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Destroy the server, buffers &amp; sockets.
network_destroy(server);
buffer_delete(global.buffer);
ds_list_destroy(global.players);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Player Information
draw_set_colour(c_black);
draw_set_font(font1);
draw_set_valign(fa_middle);
draw_set_halign(fa_left);

//draw_text(10, 100, "Status: " + string(server &gt;= 0));
//draw_text(10, 120, "Clients: " + string(ds_list_size(global.players)));

var yy = 10;

draw_text(10, yy, "ID");
draw_text(110, yy, "Name");
draw_text(210, yy, "In Game?");

yy += 20;

with (obj_server_player)
{
    draw_text(10, yy, playerIdentifier);
    draw_text(110, yy, playerName);
    draw_text(210, yy, playerInGame);
    
    yy += 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart Room
room_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create NPC's (unused)
randomize();
var npc = instance_create(x, y, obj_server_npc);
npc.xx = irandom_range(0 + 100, 3500 - 100);
npc.yy = 200;
npc.npcId = npcIdCounter;
npc.npcType = irandom_range(0, 4);
npc.npcRoom = irandom_range(1, 2);
npcIdCounter++;

//Tell all the platers about the new NPC
for (var i = 0; i &lt; ds_list_size(global.players);i++)
{
    var storedPlayerSocket = ds_list_find_value(global.players, i);
    
    var player = noone;
    
    with (obj_server_player)
    {
        if (self.playerSocket == storedPlayerSocket)
        {
            player = id;
        }
    }
    
    if (player != noone)
    {
        if (player.playerInGame &amp;&amp; player.playerRoom == npc.npcRoom)
        {
            buffer_seek(global.buffer, buffer_seek_start, 0);
            buffer_write(global.buffer, buffer_u8, 9);
            buffer_write(global.buffer, buffer_u32, npc.npcId);
            buffer_write(global.buffer, buffer_f32, npc.xx);
            buffer_write(global.buffer, buffer_f32, npc.yy);
            buffer_write(global.buffer, buffer_u8, npc.npcType);
            network_send_packet(storedPlayerSocket, global.buffer, buffer_tell(global.buffer));
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
