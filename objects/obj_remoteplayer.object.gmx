<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerRedIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables (Remote &amp; Local)
//Remote Variables
remotePlayerName = "";
remotePlayerType = 0;
remotePlayerLatency = 0;
remotePlayerHP = 100;
remotePlayerMaxHP = 100;
remotePlayerScore = 10;
remotePlayerAbility = false;
remotePlayerAttacking = false;
remotePlayerHit = false;
remotePlayerId = 0;
remotePlayersprite = 0;
remotePlayerimageindex = 0;
remotePlayerReadyToProceed = false;
remotePlayerMovementtype = "lobby";

//Movement
remote_direction = 1;
remote_hspd = 0;
remote_vspd = 0;
remote_imageangle = 0;
remote_imagealpha = 0;
remotePlayerxx = 0;
remotePlayeryy = 0;

//Local
manualmove = false;
terminalVelocity = 20;
grav = 0.65;

tox = x;
toy = y;
prevx = x;
prevy = y;
time = 0;

image_speed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Other variables
attacksound = true;
death = false;
smooth = false;
resetsound = true;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sync intially
alarm[0] = 4;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Intialisation
x = -100;
y = 0;
image_xscale = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Lobby Balls
if(room == rm_lobby)
{
    image_alpha = 1;
    alarm[11] = 10;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hit
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh X and Y
x = lerp(x, remotePlayerxx, 0.15); //0.15 is original for both!
y = lerp(y, remotePlayeryy, 0.15);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Play sound once
/*
if(remotePlayerAttacking == true &amp;&amp; attacksound == true)
{
    var slash = audio_play_sound(SwordShield1, 0, false);
    attacksound = false;
    soundpitch = choose (1,2,3,4,5);
    switch (soundpitch)
    {
        case 1: audio_sound_pitch(slash, 1.2); break;
        case 2: audio_sound_pitch(slash, 1.1); break;
        case 3: audio_sound_pitch(slash, 1.0); break;
        case 4: audio_sound_pitch(slash, 0.9); break;
        case 5: audio_sound_pitch(slash, 0.8); break;
    }
}
else if(remotePlayerAttacking == false)
{
    attacksound = true
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
alarm[0] = 1;
if(manualmove == false)
{
    //Move on X
    x += remote_hspd;
    
    //Move on Y
    y += remote_vspd;
    
    //Out of sync threshold
    if(self.x &lt; remotePlayerxx - 16 || self.x &gt; remotePlayerxx + 16 )
    {
        alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Collision Check
//Horizontal collision
/*
if(manualmove == false)
{
    if (place_meeting(x+remote_hspd, y, obj_block))
    {
        while (!place_meeting(x+sign(remote_hspd), y, obj_block))
        {
            x += sign(remote_hspd);
        }
       remote_hspd = 0;
       //alarm[0] = 1;
    }
    
    //Vertical collisions
    if (place_meeting(x, y, obj_block))
    {
        while (!place_meeting(x, y+sign(remote_vspd), obj_block))
        {
            y += sign(remote_vspd);
        }
        remote_vspd = 0;
        //alarm[0] = 1;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ground Check
/*
if(manualmove == false)
{
    if (place_meeting(x, y + 1, obj_block))
    {
        //If touching ground
        remote_vspd = 0;
        grounded = true;
    }
    else
    {
        grounded = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations
//Direction
image_xscale = remote_direction;
image_angle = remote_imageangle;
sprite_index = remotePlayersprite;
image_index = remotePlayerimageindex;
image_alpha = remote_imagealpha;

if(room != rm_lobby)
{
    if(remote_hspd == 0)
    {
       // sprite_index = spr_PlayerBlueIdle;
        image_speed = 0.25;
    }
    
    else if (remote_hspd != 0)
    {
        //sprite_index = spr_PlayerBlueRun;
        image_speed = 0.25 * remote_hspd * image_xscale
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Reset things
if(remotePlayerAttacking == false)
{
    resetframe = true;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Refresh position
if (remote_hspd == 0)
{
    alarm[0] = 1;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_projectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do damage and other...
/*
if(remotePlayerHit == false &amp;&amp; obj_projectile.damage &gt; 0)
{
    hit = true
    alarm[10] = 45;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
if(remotePlayerMovementtype == "ice") //CHANGE THIS TO REMOTEMOVEMENT TYPE!
{
    shader_set(shader_frozen);
    draw_self();
    shader_reset();
}
else if(remotePlayerHit == true)
{
    shader_set(shader_hit);
    draw_self();
    shader_reset();
}
else if(remotePlayerMaxHP == 140 &amp;&amp; remotePlayerAbility == true)
{
    shader_set(shader_grey);
    draw_self();
    shader_reset();
}
else if(remote_imagealpha &lt; 0.31)
{
    
}
else
{ 

    draw_self();
    //draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}

draw_set_font(font1);
draw_set_colour(c_red);


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw name of player (lobby).
if(room == rm_lobby)
{
    draw_set_colour(c_white);
    draw_text(x + 30, y, string(self.remotePlayerName)); // + " " + string(remotePlayerId));
    draw_sprite_ext(spr_Box, 0, x - 40, y, 0.30, 0.30, 0, c_white, 1);
    
    //Show remote player's ready status.
    if(remotePlayerReadyToProceed == true || instance_number(obj_transition2) &gt; 0)
    {
        draw_sprite_ext(spr_Tick, 0, x - 40, y, 0.20, 0.20, 0, c_white, 1);
    }
    else
    {
        draw_sprite_ext(spr_X, 0, x - 40, y, 0.20, 0.20, 0, c_white, 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HP bar
if(room != rm_lobby &amp;&amp; remotePlayerMaxHP &gt; 0 &amp;&amp; remotePlayerHP &gt; 0 &amp;&amp; remote_imagealpha &gt; 0.31)
{
    percentage = self.remotePlayerHP / self.remotePlayerMaxHP;
    xpos = x
    ypos = y
    hpgap = 30;
    
    for (i = 0; i &lt; 27; i += 1)
    {
        self.temp = (0.038 * i)
        self.temp2 = (0.038 * i+1)
    
        if(self.percentage &gt;= self.temp &amp;&amp; self.percentage &lt;= self.temp2 &amp;&amp; self.percentage &gt; 0)
        {
            switch(self.remotePlayerType)
            {
                //Blue
                case 0:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Red
                case 1:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Green
                case 2:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Yellow
                case 3:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
            }
        }
        else if(self.percentage &gt;= self.temp &amp;&amp; self.percentage &lt;= self.temp2 &amp;&amp; self.percentage &lt;= 0)
        {
            switch(self.remotePlayerType)
            {
                //Blue
                case 0:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Red
                case 1:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Green
                case 2:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Yellow
                case 3:
                    if(image_angle == 0)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(image_angle == -90)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(image_angle == 90)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(image_angle == 180)
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If frozen.
if(remotePlayerMovementtype == "ice")
{
    draw_sprite_ext(spr_Frozen,0,x,y,1,1,image_angle,c_white,1);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
