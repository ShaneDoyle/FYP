<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_PlayerBlueIdle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
depth = 2;
circlelight = 480 + 2000;
hit = false;
PlayerDeath = false;

//Gravity
dir = "up";
inverted = 1; //Y
xinverted = 0; //X

//Movement
grav = 9.0;
hspd = 0;
vspd = 0;
acc = 0.3;
dacc = 0.15;
jumpspeed = 9.0;
maxspeed = 2.5;
grounded = false;
slowmovement = false;
reverse_image_speed = 1;


//---Combat Stats
//Energy
playermaxenergy = 100;
playerenergy = 100;

//Defensive
death = false;
playerhp = 100;
playermaxhp = 100;
immunity = false;

//Attack
projectileCount = 0;
attack = 10;
attacking = false;
attacksound = true;
createhitbox = true;
attackcool = 0;
powerup = global.powerup;

//Gamemode
playerscore = 0;

//Misc
sendbuffer = 0;
colour = global.playerType;
jetpack = false; //Powerup 1
jetpackanimation = false;
miscsound = true;
readytoproceed = false;

//Controls
key_right = noone;
key_left = noone;
key_up = noone;
key_down = noone;
key_jump = noone;
key_attack = noone;


switch(global.playerType)
{
    case 0:
        //Blue
       colour = 0;
    break
    
    case 1:
        //Red
        colour = 1;
    break;
    
    case 2:
        //Green
        colour = 2;
    break;
    
    case 3:
        //Yellow
        colour = 3;
    break;
    
    case 4:
        //???
        colour = 3;
    break;
    
    case 5:
        //???
        colour = 3;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create Camera
instance_create(x,y,obj_Camera);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///If room is lobby
if(room == rm_lobby)
{
    manualmove = true;
    image_speed = 0.3;
    
    x = 32 * 2;
    y = 32 * 1 + ((global.playerId - 1) * 48);
    
    /*
    if(global.playerId == 1)
    {
        x = 32 * 2;
        y = 32 * 1;
    }
    
    if(global.playerId == 2)
    {
        x = 32 * 6;
        y = 32 * 9;
    }
    
    if(global.playerId == 3)
    {
        x = 32 * 9;
        y = 32 * 9;
    }
    
    if(global.playerId == 4)
    {
        x = 32 * 12;
        y = 32 * 9;
    }
    
    ///Draw Lobby Balls
    if(room == rm_lobby)
    {
        //Different colours
        /*
        switch(colour)
        {
            case 0:
                instance_create(x,y,obj_PlayerBubble);
            break;
            
            case 1:
                instance_create(x,y,obj_PlayerBubble);
            break;
            
            case 2:
                instance_create(x,y,obj_PlayerBubble);
            break;
            
            case 3:
                instance_create(x,y,obj_PlayerBubble);
            break;
        }
        
    }
    */
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create light
instance_create(x,y,obj_lighting);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create initial transition
instance_create(x,y,obj_transition1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Load stats
self.powerup = global.powerup;
self.colour = global.playerType;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string></string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Enable special ability
if(grounded == false)
{
    jetpack = true;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Remove hit
hit = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="9">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase light
if(circlelight &lt; 300)
{
    circlelight++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Revive player.
playerhp = playermaxhp;
PlayerDeath = false;
image_alpha = 1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ability cooldown
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attack cooldown

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement
/*
    if(1 == 1)
    {
        
        scr_detectKey();
        scr_setSprite();
        scr_attackKey();
        scr_leftCheck();
        scr_rightCheck();
        scr_groundCheck();
        scr_jumpCheck();
        scr_standCheck();
        scr_collisionCheck();
        scr_mouseCheck();
        
    }
    else
    {
        scr_death();
    }


//Change direction
var d = 0;
switch (dir)
{
    case "left":
        d = 1;
    break
    
    case "right":
        d = 2;
    break;
}

*/
//Update player data
d = image_xscale

buffer_seek(global.buffer, buffer_seek_start, 0);
buffer_write(global.buffer, buffer_u8, 7);
buffer_write(global.buffer, buffer_u32, global.playerId);
buffer_write(global.buffer, buffer_f32, x);
buffer_write(global.buffer, buffer_f32, y);
buffer_write(global.buffer, buffer_f32, hspd); 
buffer_write(global.buffer, buffer_f32, vspd); 
buffer_write(global.buffer, buffer_s8, image_xscale);
buffer_write(global.buffer, buffer_s16, image_angle);
buffer_write(global.buffer, buffer_s16, sprite_index);
buffer_write(global.buffer, buffer_s16, image_index);
buffer_write(global.buffer, buffer_u8, playerhp);
buffer_write(global.buffer, buffer_u8, playermaxhp);
buffer_write(global.buffer, buffer_u8, playerscore);
buffer_write(global.buffer, buffer_bool, attacking);
buffer_write(global.buffer, buffer_bool, readytoproceed);
buffer_write(global.buffer, buffer_u8, global.playerRoom);
network_send_packet(obj_controller.socket, global.buffer, scr_getBufferSize());



//Typing stuff (unused)
/*
if (!global.typing)
{
    if (keyboard_check(ord("P")))
    {
        if (!instance_exists(obj_playerList))
        {
            instance_create(x, y, obj_playerList);
        }
    }
    else
    {
        if (instance_exists(obj_playerList))
        {
            with(obj_playerList)
            {
                instance_destroy();
            }
        }
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Moving Script
if(room != rm_lobby)
{
    if(global.PlayerMove == true &amp;&amp; PlayerDeath == false)
    {
        key_right = keyboard_check(vk_right);
        key_left = keyboard_check(vk_left);
        key_up = keyboard_check(vk_up);
        key_down = keyboard_check(vk_down);
        key_jump = keyboard_check_pressed(vk_space);
        key_attack = keyboard_check_pressed(ord('F'));
    }
    else
    {
        key_right = noone;
        key_left = noone;
        key_up = noone;
        key_down = noone;
        key_jump = noone; 
        key_attack = noone;
    }

//Up
if(dir = "up")
{
    //Inputs
    if(key_left)
    {
        hspd -= acc
    }
    else if (key_right)
    {
        hspd += acc
    }
    else if(!key_left &amp;&amp; !key_right)
    {
        if(hspd != 0)
        {
            hspd -= dacc *image_xscale
        }
    }
    
    //Max speed
    if(hspd &lt; maxspeed * -1)
    {
        hspd = maxspeed * -1;
    }
    else if(hspd &gt; maxspeed)
    {
        hspd = maxspeed;
    }
    
    if(hspd &lt; 0)
    {
        image_xscale = -1;
    }
    else if (hspd &gt; 0)
    {
        image_xscale = 1;
    }
    
    if(vspd &lt; 10)
    {
        vspd += grav;
    }
    
    //Jumping
    if(place_meeting(x, y+1, obj_block) &amp;&amp; (key_jump))
    {
        y -= 1;
        vspd = -jumpspeed;
    }
    
    if(!place_meeting(x, y+1, obj_block))
    {
        grounded = false;
    }
    else
    {
        grounded = true;
    }
    
    //Horizontal collision
    if (place_meeting(x+hspd, y, obj_block))
    {
    while (!place_meeting(x+sign(hspd), y, obj_block))
    {
        x += sign(hspd);
    }
    
    hspd = 0;
    }
        
    
    
    //Set horizontal position
    x += hspd;
    
    //Vertical collisions
    if (place_meeting(x, y+vspd, obj_block))
    {
    while (!place_meeting(x, y+sign(vspd), obj_block))
    {
        y += sign(vspd);
    }
    
    vspd = 0;
    }
    
    
    //Set vertical position
    y += vspd;
}

//Down
if(dir = "down")
{
    //Inputs
    if(key_left)
    {
        hspd += acc
    }
    else if (key_right)
    {
        hspd -= acc
    }
    else if(!key_left &amp;&amp; !key_right)
    {
        if(hspd != 0)
        {
            hspd += dacc *image_xscale
        }
    }
    
    //Max speed
    if(hspd &lt; maxspeed * -1)
    {
        hspd = maxspeed * -1;
    }
    else if(hspd &gt; maxspeed)
    {
        hspd = maxspeed;
    }
    
    if(hspd &lt; 0)
    {
        image_xscale = 1;
    }
    else if (hspd &gt; 0)
    {
        image_xscale = -1;
    }
    
    if(vspd &lt; 10)
    {
        vspd -= grav;
    }
    
    if(place_meeting(x,y-1,obj_block))
    {
        vspd += key_jump * jumpspeed;
    }
    
    if(!place_meeting(x, y-1, obj_block))
    {
        grounded = false;
    }
    else
    {
        grounded = true;
    }
    
    //Horizontal Collision
    if(place_meeting(x + hspd, y, obj_block))
    {
        while(!place_meeting(x+ sign(hspd), y, obj_block))
        {
            x += sign(hspd);
        }
        hspd = 0;
    }

    //Vertical Collision
    if(place_meeting(x,y + vspd,obj_block))
    {
        while(!place_meeting(x, y+sign(vspd), obj_block))
        {
            y += sign(vspd);
        }
        vspd = 0;
    }

    x += hspd;
    y += vspd;
}


//Right
else if(dir == "right")
{
    //Inputs
    if(key_left)
    {
        vspd -= acc
    }
    else if (key_right)
    {
        vspd += acc
    }
    else if(!key_left &amp;&amp; !key_right)
    {
        if(vspd != 0)
        {
            vspd -= dacc *image_xscale
        }
    }
    
    //Max speed
    if(vspd &lt; maxspeed * -1)
    {
        vspd = maxspeed * -1;
    }
    else if(vspd &gt; maxspeed)
    {
        vspd = maxspeed;
    }
    
    //Direction
    if(vspd &lt; 0)
    {
        image_xscale = -1;
    }
    else if (vspd &gt; 0)
    {
        image_xscale = 1;
    }
    
    if(hspd &lt; 10)
    {
        hspd -= grav;
    }
    
    //Jumping
    if(place_meeting(x - 1, y, obj_block) &amp;&amp; (key_jump))
    {
        x += 1;
        hspd = jumpspeed;
    }
    
    
    if(!place_meeting(x-1, y, obj_block))
    {
        grounded = false;
    }
    else
    {
        grounded = true;
    }
    
    //Horizontal Collision
    if(place_meeting(x + hspd, y, obj_block))
    {
        while(!place_meeting(x+ sign(hspd), y, obj_block))
        {
            x += sign(hspd);
        }
        hspd = 0;
    }

    //Vertical Collision
    if(place_meeting(x,y + vspd,obj_block))
    {
        while(!place_meeting(x, y+sign(vspd), obj_block))
        {
            y += sign(vspd);
        }
        vspd = 0;
    }

    x += hspd;
    y += vspd;
    

}

//Left
else if(dir == "left")
{
    //Inputs
    if(key_left)
    {
        vspd += acc
    }
    else if (key_right)
    {
        vspd -= acc
    }
    else if(!key_left &amp;&amp; !key_right)
    {
        if(vspd != 0)
        {
            vspd += dacc *image_xscale
        }
    }
    
    //Max speed
    if(vspd &lt; maxspeed * -1)
    {
        vspd = maxspeed * -1;
    }
    else if(vspd &gt; maxspeed)
    {
        vspd = maxspeed;
    }
    
    //Direction
    if(vspd &lt; 0)
    {
        image_xscale = 1;
    }
    else if (vspd &gt; 0)
    {
        image_xscale = -1;
    }
    
    if(hspd &lt; 10)
    {
        hspd += grav;
    }
    
    if(place_meeting(x+1,y,obj_block))
    {
        hspd = key_jump * -jumpspeed;
    }
    
    if(!place_meeting(x+1, y, obj_block))
    {
        grounded = false;
    }
    else
    {
        grounded = true;
    }
    
    //Horizontal Collision
    if(place_meeting(x + hspd, y, obj_block))
    {
        while(!place_meeting(x+ sign(hspd), y, obj_block))
        {
            x += sign(hspd);
        }
        hspd = 0;
    }

    //Vertical Collision
    if(place_meeting(x,y + vspd,obj_block))
    {
        while(!place_meeting(x, y+sign(vspd), obj_block))
        {
            y += sign(vspd);
        }
        vspd = 0;
    }

    x += hspd;
    y += vspd;
}
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Attacking!
if(room != rm_lobby)
{



//(1) Sword &amp; Shield
if(powerup == 1)
{
    //Slash
    if(key_attack &amp;&amp; alarm[0] == -1 &amp;&amp; playerenergy &gt;= 30)
    {
        playerenergy -= 30;
        if(dir == "up")
        {
            var bullet = instance_create(x + (50 * image_xscale), y + 10, obj_projectile);
            image_index = 0;
            image_speed = 0.65;
            alarm[0] = 20;
            bullet.life = 5;
            attacking = true;
        }
        else if(dir == "down")
        {
            var bullet = instance_create(x - (50 * image_xscale), y - 10, obj_projectile);
            image_index = 0;
            image_speed = 0.65;
            alarm[0] = 20;
            bullet.life = 5;
            bullet.image_angle = -180;
            attacking = true;
        }
        else if(dir == "right")
        {
            var bullet = instance_create(x - 10 , y + (50 * image_xscale), obj_projectile);
            image_index = 0;
            image_speed = 0.65;
            alarm[0] = 20;
            bullet.life = 5;
            bullet.image_angle = -90;
            attacking = true;
        }
        else if(dir == "left")
        {
            var bullet = instance_create(x + 10 , y - (50 * image_xscale), obj_projectile);
            image_index = 0;
            image_speed = 0.65;
            alarm[0] = 20;
            bullet.life = 5;
            bullet.image_angle = -270;
            attacking = true;
        }
        
        bullet.damage = 20;
    }
    
    //Shield Ability
    if(keyboard_check_pressed(ord('G')))
    {
        
    }
}

//(2) Laser
if(powerup == 2)
{
    //Fire Lightning
    if(keyboard_check(ord('F'))&amp;&amp; alarm[0] == -1 &amp;&amp; playerenergy &gt;= 20 &amp;&amp; PlayerDeath == false)
    {
        playerenergy -= 20;
        slowmovement = true;
        alarm[0] = 16;
        if(dir == "up")
        {
            var bullet = instance_create(x + (81 * image_xscale), y + 14, obj_projectile);
            
            bullet.followx = 81;
            bullet.followy = 14;
            bullet.followplayer = true;
        }
        else if(dir == "down")
        {
            var bullet = instance_create(x - (81 * image_xscale), y - 14, obj_projectile);
            
            bullet.followx = -81;
            bullet.followy = -14;
            bullet.image_angle = -180;
            bullet.followplayer = true;
        }
        
        else if(dir == "right")
        {
            var bullet = instance_create(x-14 , y + (81 * image_xscale), obj_projectile);
            bullet.followx = -14;
            bullet.followy = 81;
            bullet.image_angle = -90;
            bullet.followplayer = true;
        }
        else if(dir == "left")
        {
            var bullet = instance_create(x+14 , y - (81 * image_xscale), obj_projectile);
            bullet.followx = 14;
            bullet.followy = -81;
            bullet.image_angle = 90;
            bullet.image_xscale = image_xscale;
            bullet.followplayer = true;
        }
        
        bullet.sprite_index = spr_Laser;
        bullet.powerup = 2;
        bullet.image_xscale = image_xscale;
        bullet.image_speed = 0.5;
        bullet.life = 16;
        bullet.damage = 15;
        bullet.image_index = irandom_range(0,0);
        
        sound = choose(1,2,3)
        audio_stop_sound(LightningZap1);
        audio_stop_sound(LightningZap2);
        audio_stop_sound(LightningZap3);
        if(sound == 1)
        {
            audio_play_sound(LightningZap1, 0, false);
        }
        else if(sound == 2)
        {
            audio_play_sound(LightningZap2, 0, false);
        }
        else if(sound == 3)
        {
            audio_play_sound(LightningZap3, 0, false);
        }
    }
    

    //Enable jetpack
    if(grounded == false)
    {
        if(alarm[11] == -1)
        {
            alarm[11] = 15;
        }
    }
    else if(grounded == true)
    {
        alarm[11] = -1;
        jetpack = false;
    }
    

    
    if(keyboard_check(vk_space) &amp;&amp; jetpack == true &amp;&amp; playerenergy &gt;= 9 &amp;&amp; PlayerDeath == false)
    {
        if(playerenergy &lt;= 10)
        {
            playerenergy = 0;
        }
        playerenergy -= 1;
        
        if(dir == "up")
        {
            vspd -= 1.1;
            if(vspd &lt; -2)
            {
                vspd = -2;
            }
        }
        else if(dir == "right")
        {
            hspd += 1.1;
            if(hspd &gt; 2)
            {
                hspd = 2;
            }
        }
        else if(dir == "left")
        {
            hspd -= 1.1;
            if(hspd &lt; -2)
            {
                hspd = -2;
            }
        }
        else if(dir == "down")
        {
            vspd += 1.1;
            if(vspd &gt; 2)
            {
                vspd = 2;
            }
        }
        
        jetpackanimation = true;
        if (miscsound == true)
        {
            audio_play_sound(Jetpack, 0, false);
        }
        miscsound = false;
    }
    

    else
    {
        jetpackanimation = false;
        audio_stop_sound(Jetpack);
        miscsound = true;
    }
    
    if(alarm[0] == -1)
    {
        slowmovement = false;
        
    }
    
    else if(slowmovement == true)
    {
        if(dir == "up" || dir == "down")
        {
            if(hspd &gt; maxspeed * 0.5)
            {
                hspd = maxspeed * 0.5;
            }
            else if(hspd &lt; maxspeed * -0.5)
            {
                hspd = maxspeed * -0.5;
            }
        }
        else
        {
            if(vspd &gt; maxspeed * 0.5)
            {
                vspd = maxspeed * 0.5;
            }
            else if(vspd &lt; maxspeed * -0.5)
            {
                vspd = maxspeed * -0.5;
            }
        }
    }
}

//(3) Summoning (Necromancer)
if(powerup == 3)
{
    //Dark Sphere
    if(key_attack &amp;&amp; alarm[0] == -1 &amp;&amp; playerenergy &gt;= 70 )
    {
        playerenergy -= 70;
        image_index = 0;
        image_speed = 0.65;
        attacking = true;
        alarm[0] = 90;
        if(dir == "up")
        {
            var bullet = instance_create(x + (10 * image_xscale), y, obj_projectile);
            bullet.hspeed = 3 * image_xscale;
        }
        else if(dir == "down")
        {
            var bullet = instance_create(x - (10 * image_xscale), y, obj_projectile);
            bullet.hspeed = -3 * image_xscale;
        }
        else if (dir == "right")
        {
            var bullet = instance_create(x , y + (10 * image_xscale), obj_projectile);
            bullet.vspeed = 3 * image_xscale;
        }
        else if (dir == "left")
        {
            var bullet = instance_create(x , y - (10 * image_xscale), obj_projectile);
            bullet.vspeed = -3 * image_xscale;
        }
        
        bullet.sprite_index = spr_DarkSphere;
        bullet.powerup = 3;
        bullet.life = 100;
        bullet.rotate = 25;
        bullet.fadein = false;
        bullet.damage = 35;
        
    }
}

}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations (Blue)
if(dir == "up")
{
    reverse_image_speed = 1;
}
else if(dir == "down")
{
    reverse_image_speed = -1;
}
//Player Blue
if(global.playerType == 0)
{
    if(dir == "up" || dir == "down")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerBlueJump;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerBlueRun;
                image_speed = 0.30 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerBlueAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_SwordShield;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_SwordShield;
                image_speed = 0.25;
    
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_SwordShield;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerBlueJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_ShockBlaster;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_ShockBlaster;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerBlueAttack_Summoning;
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_Summoning;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_Summoning;
                image_speed = 0.25 * hspd * image_xscale;
            }
        }
    }
    
    else if(dir == "right" || dir == "left")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerBlueJump;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerBlueRun;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerBlueAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_SwordShield
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_SwordShield
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_SwordShield
                if(dir == "right")
                {
                    image_speed = 0.30 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.30 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerBlueJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_ShockBlaster;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_ShockBlaster;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerBlueAttack_Summoning;
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerBlueJump_Summoning;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerBlueIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerBlueMove_Summoning;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations (Red)
if(dir == "up")
{
    reverse_image_speed = 1;
}
else if(dir == "down")
{
    reverse_image_speed = -1;
}

//Player Red
if(global.playerType == 1)
{
    if(dir == "up" || dir == "down")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerRedJump;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerRedIdle;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerRedRun;
                image_speed = 0.30 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerRedAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerRedJump_SwordShield;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_SwordShield;
                image_speed = 0.25;
    
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerRedMove_SwordShield;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerRedJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerRedJump_ShockBlaster;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerRedMove_ShockBlaster;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerRedJump_Summoning;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerRedMove_Summoning;
                image_speed = 0.25 * hspd * image_xscale;
            }
        }
    }
    
    else if(dir == "right" || dir == "left")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerRedJump;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerRedIdle;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerRedRun;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerRedAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerRedJump_SwordShield
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_SwordShield
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerRedMove_SwordShield
                if(dir == "right")
                {
                    image_speed = 0.30 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.30 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerRedJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerRedJump_ShockBlaster;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerRedMove_ShockBlaster;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerRedJump_Summoning;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerRedIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerRedMove_Summoning;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations (Green)
if(dir == "up")
{
    reverse_image_speed = 1;
}
else if(dir == "down")
{
    reverse_image_speed = -1;
}

//Player Green
if(global.playerType == 2)
{
    if(dir == "up" || dir == "down")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerGreenJump;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerGreenRun;
                image_speed = 0.30 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerGreenAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_SwordShield;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_SwordShield;
                image_speed = 0.25;
    
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_SwordShield;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerGreenJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_ShockBlaster;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_ShockBlaster;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_Summoning;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_Summoning;
                image_speed = 0.25 * hspd * image_xscale;
            }
        }
    }
    
    else if(dir == "right" || dir == "left")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerGreenJump;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerGreenRun;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerGreenAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_SwordShield
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_SwordShield
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_SwordShield
                if(dir == "right")
                {
                    image_speed = 0.30 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.30 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerGreenJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_ShockBlaster;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_ShockBlaster;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerGreenJump_Summoning;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerGreenIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerGreenMove_Summoning;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animations (Yellow)
if(dir == "up")
{
    reverse_image_speed = 1;
}
else if(dir == "down")
{
    reverse_image_speed = -1;
}

//Player Yellow
if(global.playerType == 3)
{
    if(dir == "up" || dir == "down")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerYellowJump;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerYellowRun;
                image_speed = 0.30 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerYellowAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_SwordShield;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_SwordShield;
                image_speed = 0.25;
    
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_SwordShield;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerYellowJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(vspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_ShockBlaster;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_ShockBlaster;
                image_speed = 0.25 * hspd * image_xscale * reverse_image_speed;
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(vspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_Summoning;
            }
            
            else if(hspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (hspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_Summoning;
                image_speed = 0.25 * hspd * image_xscale;
            }
        }
    }
    
    else if(dir == "right" || dir == "left")
    {
        //(0) Idle
        if(powerup == 0)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerYellowJump;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerYellowRun;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(1) Sword &amp; Shield
        else if(powerup == 1)
        {
            if(attacking == true)
            {            
                sprite_index = spr_PlayerYellowAttack_SwordShield
                image_speed -= 0.025;
                if(image_index &gt;= 2 &amp;&amp; attacksound == true)
                {
                    var slash;
                    attacksound = false;
                    pick = choose(1,2)
                    if(pick == 1)
                    {
                        slash = audio_play_sound(SwordShield1, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
                    else
                    {
                        slash = audio_play_sound(SwordShield2, 10, false);
                        audio_sound_pitch(slash, 0.9)
                    }
    
                }
                if(image_index &gt;= 7)
                {
                    attacking = false;
                    attacksound = true;
                }
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_SwordShield
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_SwordShield
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_SwordShield
                if(dir == "right")
                {
                    image_speed = 0.30 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.30 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(2) Shock Blaster
        else if(powerup == 2)
        {
            if(jetpackanimation == true)
            {
                sprite_index = spr_PlayerYellowJetpack_ShockBlaster;
                image_speed = 0.35;
            }
            
            else if(hspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_ShockBlaster;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_ShockBlaster;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_ShockBlaster;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
        
        //(3) Summoning (Necromancer)
        else if(powerup == 3)
        {
            if(hspd != 0)
            {
                sprite_index = spr_PlayerYellowJump_Summoning;
            }
            
            else if(vspd == 0)
            {
                sprite_index = spr_PlayerYellowIdle_Summoning;
                image_speed = 0.25;
            }
            
            else if (vspd != 0)
            {
                sprite_index = spr_PlayerYellowMove_Summoning;
                if(dir == "right")
                {
                    image_speed = 0.25 * vspd * image_xscale;
                }
                else
                {
                    image_speed = 0.25 * vspd * image_xscale * -1;
                }
            }
        }
    }
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///View Angle
view_angle = lerp( view_angle, image_angle * -1, 0.125);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Increase Light
if (alarm[9] == -1)
{
    alarm[9] = 15;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change stats per class (Lobby).
if(room == rm_lobby)
{
    //Sword &amp; Shield
    if(powerup == 1)
    {
        playermaxhp = 140;
        playerhp = 140;
        maxspeed = 2.4;
        jumpspeed = 9.0;
    }
    //Shock Blaster
    else if(powerup == 2)
    {
        playermaxhp = 110;
        playerhp = 110;
        maxspeed = 2.4 + (0.3 * 1);
        jumpspeed = 9.0 + (0.25 * 1);
    }
    //Summoner
    else if(powerup == 3)
    {
        playermaxhp = 100;
        playerhp = 100;
        maxspeed = 2.4 + (0.3 * 1);
        jumpspeed = 9.0 + (0.25 * 1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Lobby configuration shit
if(room == rm_lobby)
{
    global.proceedtogame = 0;
    with (obj_remoteplayer)
    {
        if (remotePlayerReadyToProceed == true)
        {
            global.proceedtogame++;
        }
    }
    if(obj_localplayer.readytoproceed == true)
    {
        if(global.proceedtogame == instance_number(obj_remoteplayer) &amp;&amp; global.proceedtogame &gt; 0)
        {
            //audio_stop_sound(Lobby_Music);
            global.LobbyIsReady = true;
        }
        else
        {
            global.LobbyIsReady = false;
        }
    }
    else
    {
        global.LobbyIsReady = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///HP, Energy &amp; Score Caps
if(playerhp &lt;= 0)
{
    playerhp = 0;
    PlayerDeath = true;
}

if(playerenergy &gt;= 100)
{
    playerenergy = 100;
}
else
{
    playerenergy += 0.35;
}

if(playerscore &lt; 0)
{
    playerscore = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Death Manager
if(PlayerDeath == true)
{
    image_alpha -= 0.01;
    image_speed = 0;
    if(alarm[8] == -1)
    {
        playerscore--;
        alarm[8] = 600;
    } 
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_DownPortal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip player
if(alarm[9] == -1)
{
    alarm[9] = 20;
}


dir = "down";
scr_angle_player("down");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_Portal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip player
if(alarm[9] == -1)
{
    alarm[9] = 20;
}
inverted = 1;
xinverted = 0;

dir = "up";
scr_angle_player("up");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_RightPortal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip player
if(alarm[9] == -1)
{
    alarm[9] = 20;
}

dir = "right";

scr_angle_player("right");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_LeftPortal">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Flip player
if(alarm[9] == -1)
{
    alarm[9] = 20;
}

dir = "left";

    
scr_angle_player("left");
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_remoteProjectile">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Do damage and other...
if(hit == false)
{
    playerhp -= obj_remoteProjectile.damage;
    hit = true
    alarm[10] = 30;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_client_gem">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Request to server to delete the gem, and gain points!
if(instance_number(obj_client_claim_gem) &lt; 1)
{
    instance_create(x,y,obj_client_claim_gem);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="53">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Testing shooting...
/*
if (state == "standing" &amp;&amp; !jumping &amp;&amp; !falling)
{

    state = "standing";
    alarm[0] = room_speed * 0.25;
    
    var xx = x;
    var yy = y - 10;
    
    if (dir = "right")
    {
        xx = x + 26;
    }
    else
    {
        xx = x - 26;
    }
    
    var proj = instance_create(xx, yy, obj_projectile);
    proj.speed = 8;
    proj.direction = point_direction(xx, yy, mouse_x, mouse_y);
    proj.owner = global.playerId;
    proj.projectileId = projectileCount;
    
    buffer_seek(global.buffer, buffer_seek_start, 0);
    buffer_write(global.buffer, buffer_u8, 11);
    buffer_write(global.buffer, buffer_u32, global.playerId);
    buffer_write(global.buffer, buffer_u32, projectileCount);
    buffer_write(global.buffer, buffer_f32, xx);
    buffer_write(global.buffer, buffer_f32, yy);
    buffer_write(global.buffer, buffer_u8, global.playerRoom);
    network_send_packet(obj_controller.socket, global.buffer, scr_getBufferSize());
    
    projectileCount++;
    
}
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Teleport back to start
//vspd = 0;
//hspd = 0;
/*
if(alarm[10] = -1)
{
    alarm[10] = room_speed * 3;
}

if(death == false)
{
    audio_stop_all();
    audio_play_sound(DeathSound_1, 0, false);
}
playerhp = 0
manualmove = true;
death = true;
image_index = 0;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Top Bar GUI
xpos = 0
ypos = 0

//draw_sprite(spr_TopBar,0,xpos,ypos);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HP bar on GUI bar

/*
percentage = playerhp / playermaxhp
xpos = 0
ypos = 0

for (i = 0; i &lt; 51; i += 1)
{
    
    temp = (0.02 * i)
    temp2 = (0.02 * i+1)

    if(percentage &gt;= temp &amp;&amp; percentage &lt;= temp2 &amp;&amp; percentage &gt; 0)
    {
        draw_sprite(spr_HPBar,50-i,xpos,ypos);
    }
    else if(percentage &lt;= 0)
    {
        draw_sprite(spr_HPBar,50,xpos,ypos);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Energy bar on GUI bar
/*
percentage = playerenergy / playermaxenergy
xpos = 0
ypos = 18

for (i = 0; i &lt; 51; i += 1)
{
    
    temp = (0.02 * i)
    temp2 = (0.02 * i+1)
    if(percentage &gt;= temp &amp;&amp; percentage &lt;= temp2)
    {
        draw_sprite(spr_EnergyBar,50-i,xpos,ypos);
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HP Bar

/*
percentage = playerhp / playermaxhp
xpos = display_get_gui_width() / 2
ypos = 26;

if(room != rm_lobby)
{
if (playerhp &gt;= 90)
{
    draw_sprite(spr_PlayerGreenHP,0,xpos,ypos);
}
else if (playerhp &gt;= 80 &amp;&amp; playerhp &lt; 90)
{
    draw_sprite(spr_PlayerGreenHP,1,xpos,ypos);
}
else if (playerhp &gt;= 70 &amp;&amp; playerhp &lt; 80)
{
    draw_sprite(spr_PlayerGreenHP,2,xpos,ypos);
}
else if (playerhp &gt;= 60 &amp;&amp; playerhp &lt; 70)
{
    draw_sprite(spr_PlayerGreenHP,3,xpos,ypos);
}
else if (playerhp &gt;= 50 &amp;&amp; playerhp &lt; 60)
{
    draw_sprite(spr_PlayerGreenHP,4,xpos,ypos);
}
else if (playerhp &gt;= 40 &amp;&amp; playerhp &lt; 50)
{
    draw_sprite(spr_PlayerGreenHP,5,xpos,ypos);
}
else if (playerhp &gt;= 30 &amp;&amp; playerhp &lt; 40)
{
    draw_sprite(spr_PlayerGreenHP,6,xpos,ypos);
}
else if (playerhp &gt;= 20 &amp;&amp; playerhp &lt; 30)
{
    draw_sprite(spr_PlayerGreenHP,7,xpos,ypos);
}
else if (playerhp &gt;= 10 &amp;&amp; playerhp &lt; 20)
{
    draw_sprite(spr_PlayerGreenHP,8,xpos,ypos);
}
else if (playerhp &gt;= 0 &amp;&amp; playerhp &lt; 10)
{
    draw_sprite(spr_PlayerGreenHP,9,xpos,ypos);
}
else if (playerhp &gt;= 80 &amp;&amp; playerhp &lt; 90)
{
    draw_sprite(spr_PlayerGreenHP,10,xpos,ypos);
}

draw_sprite(spr_Heart,0,xpos,ypos - 14);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw scores &amp; DS_GRID
draw_set_colour(c_black);
draw_set_font(stats);

//Create DS_GRID for displaying stats.
loopnumber = instance_number(obj_remoteplayer);
statsgrid = ds_grid_create(3, loopnumber+1);


//Populate the grid with our own info.
ds_grid_add(statsgrid, 0, 0, global.name);
ds_grid_add(statsgrid, 1, 0, playerscore);
ds_grid_add(statsgrid, 2, 0, global.playerType);

//Loop through all remote players.
var i = 1;
with(obj_remoteplayer)
{
    name = remotePlayerName;
    colour = remotePlayerType;
    ds_grid_add(other.statsgrid, 0, i, name);
    ds_grid_add(other.statsgrid, 1, i, remotePlayerScore);
    ds_grid_add(other.statsgrid, 2, i, colour);
    i++;
}

//Sort the stats ds_grid.
ds_grid_sort(statsgrid, 1, false);

//Draw details.
if(room == rm_gameWorld)
{
    for(i=0; i&lt;loopnumber+1; i++)
    {
        //Blue
        if(ds_grid_get(statsgrid,2,i) == 0)
        {
            draw_sprite(spr_StatIcon, 0, 10, 8 + (i * 15))
        }
        //Red
        else if(ds_grid_get(statsgrid,2,i) == 1)
        {
            draw_sprite(spr_StatIcon, 1, 10, 8 + (i * 15))
        }
        //Green
        else if(ds_grid_get(statsgrid,2,i) == 2)
        {
            draw_sprite(spr_StatIcon, 2, 10, 8 + (i * 15))
        }
        //Yellow
        else if(ds_grid_get(statsgrid,2,i) == 3)
        {
            draw_sprite(spr_StatIcon, 3, 10, 8 + (i * 15))
        }
    
        namelength = string_length(ds_grid_get(statsgrid,0,i)) * 1.35;
        
        
        //Draw Name
        draw_text(62 + namelength,  13 + (i * 15), ds_grid_get(statsgrid,0,i));
        
        //Draw Score counter
        if(ds_grid_get(statsgrid,1,i) == 1)
        {
            draw_sprite(spr_GemCounter, 0, 94, 13 + (i * 15))
        }
        else if(ds_grid_get(statsgrid,1,i) == 2)
        {
            draw_sprite(spr_GemCounter, 1, 94, 13 + (i * 15))
        }
        else if(ds_grid_get(statsgrid,1,i) == 3)
        {
            draw_sprite(spr_GemCounter, 2, 94, 13 + (i * 15))
        }
        else if(ds_grid_get(statsgrid,1,i) == 4)
        {
            draw_sprite(spr_GemCounter, 3, 94, 13 + (i * 15))
        }
        else if(ds_grid_get(statsgrid,1,i) == 5)
        {
            draw_sprite(spr_GemCounter, 4, 94, 13 + (i * 15))
        }
 
    }
}

ds_grid_destroy(statsgrid);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>other</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw name, ready status of player (lobby)
if(room == rm_lobby)
{
    draw_set_colour(c_yellow);
    draw_text(x + 30, y, global.playerName); //"Player" + " " + string(global.playerId));
    //draw_sprite(spr_Tick,0,x - 10, y);
    
    //Show ready status.
    if(readytoproceed == true)
    {
        draw_sprite_ext(spr_Tick, 0, x - 40, y, 0.20, 0.20, 0, c_white, 1);
    }
    else
    {
        draw_sprite_ext(spr_X, 0, x - 40, y, 0.20, 0.20, 0, c_white, 1);
    }
    

    //draw_text(x + 130, y, global.ClientRoom); 
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw player
if(hit == true)
{
   shader_set(shader_hit);
   draw_self();
   shader_reset();
}
else
{
    draw_sprite_ext(sprite_index, image_index, x, y, image_xscale, image_yscale, image_angle, c_white, image_alpha);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw Energy bar
if(room != rm_lobby)
{
    percentage = playerenergy / playermaxenergy
    xpos = x
    ypos = y
    hpgap = 26;
    
    for (i = 0; i &lt; 27; i += 1)
    {
        temp = (0.038 * i)
        temp2 = (0.038 * i+1)
    
        if(percentage &gt;= temp &amp;&amp; percentage &lt;= temp2 &amp;&amp; percentage &gt; 0)
        {
            if(dir == "up")
            {
                draw_sprite_ext( spr_PlayerEnergy,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
            }
            else if(dir == "right")
            {
                draw_sprite_ext( spr_PlayerEnergy,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
            }
            else if(dir == "left")
            {
                draw_sprite_ext( spr_PlayerEnergy,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
            }
            else if(dir == "down")
            {
                draw_sprite_ext( spr_PlayerEnergy,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
            }
        }
        else if(percentage &lt;= 0)
        {
            if(dir == "up")
            {
                draw_sprite_ext( spr_PlayerEnergy,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
            }
            else if(dir == "right")
            {
                draw_sprite_ext( spr_PlayerEnergy,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
            }
            else if(dir == "left")
            {
                draw_sprite_ext( spr_PlayerEnergy,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
            }
            else if(dir == "down")
            {
                draw_sprite_ext( spr_PlayerEnergy,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw HP bar
if(room != rm_lobby)
{
    percentage = playerhp / playermaxhp
    xpos = x
    ypos = y
    hpgap = 30;
    
    for (i = 0; i &lt; 27; i += 1)
    {
        temp = (0.038 * i)
        temp2 = (0.038 * i+1)
    
        if(percentage &gt;= temp &amp;&amp; percentage &lt;= temp2 &amp;&amp; percentage &gt; 0)
        {
            switch(global.playerType)
            {
                //Blue
                case 0:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Red
                case 1:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Green
                case 2:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Yellow
                case 3:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
            }
        }
        else if(percentage &lt;= 0)
        {
            switch(global.playerType)
            {
                //Blue
                case 0:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerBlueHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Red
                case 1:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerRedHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Green
                case 2:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerGreenHP,26, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
                
                //Yellow
                case 3:
                    if(dir == "up")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos - hpgap, 1, 1, 0, c_white, 1);
                    }
                    else if(dir == "right")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos + hpgap, ypos, 1, 1, -90, c_white, 1);
                    }
                    else if(dir == "left")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos - hpgap, ypos, 1, 1, 90, c_white, 1);
                    }
                    else if(dir == "down")
                    {
                        draw_sprite_ext( spr_PlayerYellowHP,26-i, xpos, ypos + hpgap, 1, 1, 180, c_white, 1);
                    }
                break;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="84">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Invert character
instance_create(x, y - 30, obj_localBeast);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ready up!
if(obj_localplayer.readytoproceed == false)
{
    obj_localplayer.readytoproceed = true;
}
else
{
    obj_localplayer.readytoproceed = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="81">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill Self
if(playerhp &gt; 0)
{
     //playerhp -= 1;
}
if(room == rm_lobby)
{
    if(alarm[0] == -1)
    {
    
        audio_stop_sound(Jetpack);
    
        if(powerup == 3)
        {
            powerup = 1;
        }
        else
        {
            powerup++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="69">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Change colour
if(room == rm_lobby)
{
    if(alarm[0] == -1)
    {
    
        if(global.playerType == 3)
        {
            global.playerType = 0;
        }
        else
        {
            global.playerType++;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="27">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restart Game
game_restart();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="10" enumb="49">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart();
audio_stop_all();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
