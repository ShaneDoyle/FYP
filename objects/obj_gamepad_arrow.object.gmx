<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rightarrow</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
x = -200;
y = -200;
option = -1;
alarm[0] = 1;

changecolourleft = false;
changecolourright = false;
changeclassleft = false;
changeclassright = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Get from global variables.
//option = global.GameArrowOption;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Positions
if(room == rm_TitleScreen)
{
    if(option == 0)
    {
        x = 192;
        y = 224;
    }
    else if(option == 1)
    {
        x = 192;
        y = 300;
    }
}
else if(room == rm_joining)
{
    if(option == 0)
    {
        x = 192;
        y = 224;
    }
    else if(option == 1)
    {
        x = 192;
        y = 300;
    }
}
else if(room == rm_listofservers)
{

    x = 32;
    y = 64;

}
else
{
    x = -200;
    y = -200;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Hardcoded controls. Bad!
gamepad_set_axis_deadzone(0,0.7);
///Arrow Controls
if(room == rm_TitleScreen || room == rm_joining)
{
    key_arrow_up = (gamepad_button_check_pressed(0,gp_padu));
    key_arrow_down = (gamepad_button_check_pressed(0,gp_padd));
    key_arrow_left = noone;
    key_arrow_right = noone;
    key_arrow_left2 = noone;
    key_arrow_right2 = noone;
    key_select = keyboard_check_pressed(vk_space) || (gamepad_button_check_pressed(0,gp_face1));
    key_back = (gamepad_button_check_pressed(0,gp_face2));
}
else
{
    key_arrow_up = noone;
    key_arrow_down = noone;
    key_arrow_left = (gamepad_axis_value(0,gp_axislh) &lt; 0);
    key_arrow_right = (gamepad_axis_value(0,gp_axislh) &gt; 0);
    key_arrow_left2 = (gamepad_axis_value(0,gp_axisrh) &lt; 0);
    key_arrow_right2 = (gamepad_axis_value(0,gp_axisrh) &gt; 0);
    key_select = (gamepad_button_check_pressed(0,gp_face1));
    key_back = (gamepad_button_check_pressed(0,gp_face2));
}

//Actions
if(key_arrow_down)
{
    if(option == 0)
    {
        audio_play_sound(Pop_1,0,false);
    }
    option = 1;
}
if(key_arrow_up)
{
    if(option == 1)
    {
        audio_play_sound(Pop_1,0,false);
    }
    option = 0;
}

if(key_select)
{
    if(room == rm_TitleScreen)
    {
        if(option == 0)
        {
            if(obj_Join.alarm[0] == -1)
            {
                obj_Join.alarm[0] = 1;
            }
        }
    
        else if(option == 1)
        {
            if(obj_Settings.alarm[0] == -1)
            {
                obj_Settings.alarm[0] = 1;
            }
        }
    }
    
    if(room == rm_joining)
    {
        if(option == 0)
        {
            if(obj_Auto.alarm[0] == -1)
            {
                obj_Auto.alarm[0] = 1;
            }
        }
    
        else if(option == 1)
        {

        }
    }
    
    if(room == rm_listofservers)
    {
        join = instance_find(obj_JoinServer,0);
        
        if(join == noone)
        {
        }
        else
        {
            if(join.alarm[0] == -1)
            {
                join.alarm[0] = 1;
            }
        }
        
    }
}

if(key_back)
{
    if(room != rm_lobby &amp;&amp; room != rm_gameWorld)
    {
        if(obj_Back.alarm[0] == -1)
        {
            obj_Back.alarm[0] = 1;
        }
    }
}

if(room == rm_Settings)
{
    //Left Analog (Left)
    if(gamepad_axis_value(0,gp_axislh) &lt; -0.5)
    {
        if(changecolourleft == false)
        {
            changecolourleft = true;
            if(obj_PlayerColourLeftArrow.alarm[0] == -1)
            {
                obj_PlayerColourLeftArrow.alarm[0] = 1;
            }
        }      
    }
    else if (gamepad_axis_value(0,gp_axislh) &gt; -0.3)
    {
        changecolourleft = false;
    }
    
    //Left Analog (Right)
    if(gamepad_axis_value(0,gp_axislh) &gt; 0.5)
    {
        if(changecolourright == false)
        {
            changecolourright = true;
            if(obj_PlayerColourRightArrow.alarm[0] == -1)
            {
                obj_PlayerColourRightArrow.alarm[0] = 1;
            }
        }  
    }
    else if (gamepad_axis_value(0,gp_axislh) &lt; 0.3)
    {
        changecolourright = false;
    }
    
    
    
    //Right Analog (Left)
    if(gamepad_axis_value(0,gp_axisrh) &lt; -0.5)
    {
        if(changeclassleft == false)
        {
            changeclassleft = true;
            if(obj_PlayerPowerUpLeftArrow.alarm[0] == -1)
            {
                obj_PlayerPowerUpLeftArrow.alarm[0] = 1;
            }
        }      
    }
    else if (gamepad_axis_value(0,gp_axisrh) &gt; -0.3)
    {
        changeclassleft = false;
    }
    
    
    
    //Right Analog (Right)
    if(gamepad_axis_value(0,gp_axisrh) &gt; 0.5)
    {
        if(changeclassright == false)
        {
            changeclassright = true;
            if(obj_PlayerPowerUpRightArrow.alarm[0] == -1)
            {
                obj_PlayerPowerUpRightArrow.alarm[0] = 1;
            }
        }  
    }
    else if (gamepad_axis_value(0,gp_axisrh) &lt; 0.3)
    {
        changeclassright = false;
    }
}






/*
if(key_arrow_left &lt; -0.4)
{
    if(changecolour == false)
    {
        changecolour = true;
        obj_PlayerColourLeftArrow.alarm[0] = 1;
    }
}

if(key_arrow_right)
{
    obj_PlayerColourRightArrow.alarm[0] = 2;
}

if(key_arrow_left2)
{
    obj_PlayerPowerUpLeftArrow.alarm[0] = 2;
}

if(key_arrow_right2)
{
    obj_PlayerPowerUpRightArrow.alarm[0] = 2;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
