<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Variables
var networkType = network_socket_tcp;
var port = 50001;
var maxPlayers = 8;
var bufferSize = 1024;
var bufferType = buffer_fixed;
var bufferAlignment = 1;
ResetId = false;

server = network_create_server(networkType, port, maxPlayers);
global.buffer = buffer_create(bufferSize, bufferType, bufferAlignment);

global.players = ds_list_create();
global.playersnames = ds_list_create();
playerIdCounter = 0;

for(i=0; i&lt;10; i++)
{
    ds_list_add(global.playersnames,"");
    ds_list_add(global.players,"");
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Handle connection, disconnection and sending data
var eventType = ds_map_find_value(async_load, "type");
switch(eventType)
{
    //Called when a player connects.
    case network_type_connect:
        var socket = ds_map_find_value(async_load, "socket");
        
        playerIdCounter++;
        ResetId = true;
        
        var pId = playerIdCounter;
        
        //ds_list_add(global.players, socket);
        
        //Send ID of the Player.
        buffer_seek(global.buffer, buffer_seek_start, 0);
        buffer_write(global.buffer, buffer_u8, 4);
        buffer_write(global.buffer, buffer_u32, playerIdCounter);
        network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
    break;
    
    //Called when a client disconnects
    case network_type_disconnect:
        var socket = ds_map_find_value(async_load, "socket");
        var index = ds_list_find_index(global.playersnames, socket);
        var index2 = ds_list_find_index(global.players, socket);
        
        //if(index != -1)
        //{
            //ds_list_delete(global.playersnames, index + 1);
            //ds_list_delete(global.playersnames, index);
            //ds_list_delete(global.players, index2 + 1);
            //ds_list_delete(global.players, index2);
            //ds_list_delete(global.playersnames, socket - 1);
            //ds_list_delete(global.players, socket - 1);
            
        //}
        

        ds_list_replace(global.playersnames, socket - 1, "Disconnected");
        ds_list_replace(global.players, socket - 1, "Disconncted");

        
        //Get information about the player leaving
        var playerLeavingId = 0;
        

        
        
    break;
    
    //Called when we recieved information from the client
    case network_type_data:
       var buffer = ds_map_find_value(async_load, "buffer");   //Crate a read buffer and store incoming information in it
       var socket = ds_map_find_value(async_load, "id");       //Get socket of the player sending the data
       buffer_seek(buffer, buffer_seek_start, 0);              //Seek to the beginning of the new created read buffer
       var PlayerName = buffer_read(buffer, buffer_string);
       var IP = buffer_read(buffer, buffer_string);
       
       if(IP == "CLIENT")
       {
            for(i=0; i&lt;ds_list_size(global.players); i++)
            {
                buffer_seek(global.buffer, buffer_seek_start, 0);
                buffer_write(global.buffer, buffer_string, string(ds_list_find_value(global.players, i)));
                network_send_packet(socket, global.buffer, buffer_tell(global.buffer));
            }
       }
       
       ds_list_replace(global.playersnames, socket - 1, PlayerName); //ds_list_add(global.playersnames,socket, PlayerName);
       ds_list_replace(global.players, socket - 1, IP);      //ds_list_add(global.players,socket, IP);
       
       //scr_server_buffers(buffer, socket);                     //Call server script
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw connections
draw_set_font(font1);
draw_set_colour(c_black);

//Draw Name
for(i=0; i&lt;ds_list_size(global.playersnames); i++)
{
    draw_text(0, 20 + (i*20) , "Connection " + string(i+1) + ": ");
    draw_text(320, 20 + (i*20), "(" + ds_list_find_value(global.playersnames,i) + ")");
}

//Draw IP
for(i=0; i&lt;ds_list_size(global.players); i++)
{
    draw_text(150, 20 + (i*20), ds_list_find_value(global.players,i));
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
